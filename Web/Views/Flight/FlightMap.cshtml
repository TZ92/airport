@model IEnumerable<Domain.Entities.Airlinecompany>

@{
    ViewBag.Title = "Airline company Map";
}

<h3 class="header smaller lighter blue"><i class="fa fa-map-marker"></i> Airline company Map</h3>

<a class="blue" href="@Url.Action("Index", "Airlines")">
    <i class="fa fa-list-alt"></i> Back to list
</a><br/><br/>

<script src="http://maps.google.com/maps/api/js?sensor=true" type="text/javascript"></script>
<style>
    #map_canvas img {
        max-width: none;
    }
</style>
<style>
    .infoDiv {
        height: 200px;
        width: 300px;
        -webkit-user-select: none;
        background-color: white;
    }
</style>

<div id="map_canvas" style="height: 600px;"></div>

@section scripts {
    <section class="scripts">

        <script type="text/javascript">

            $(document).ready(function () {
                Initialize();
            });

            // Where all the fun happens
            function Initialize() {

                // Google has tweaked their interface somewhat - this tells the api to use that new UI
                google.maps.visualRefresh = true;
                var Liverpool = new google.maps.LatLng(36.0523843, 10.1435101);

                // These are options that set initial zoom level, where the map is centered globally to start, and the type of map to show
                var mapOptions = {
                    zoom: 4,
                    center: Liverpool,
                    mapTypeId: google.maps.MapTypeId.G_NORMAL_MAP
                };

                // This makes the div with id "map_canvas" a google map
                var map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);




                // You can make markers different colors...  google it up!
                //marker.setIcon('http://maps.google.com/mapfiles/ms/icons/green-dot.png')

                // a sample list of JSON encoded data of places to visit in Liverpool, UK
                // you can either make up a JSON list server side, or call it from a controller using JSONResult
                /* var data = [
                           { "Id": 1, "PlaceName": "Liverpool Museum", "OpeningHours":"9-5, M-F","GeoLong": "53.410146", "GeoLat": "-2.979919" }
            ];*/

                var data = [
                    @foreach (var item in Model)
                    {
                        <text>
                            { "Id": 1, "PlaceName": "@item.Name", "OpeningHours": "@item.SiteWeb", "GeoLong": "@item.Longitude", "GeoLat": "@item.Latitude" },
                        </text>
                    }
                                
                ];



                // Using the JQuery "each" selector to iterate through the JSON list and drop marker pins
                $.each(data, function (i, item) {
                                var marker = new google.maps.Marker({
                        'position': new google.maps.LatLng(item.GeoLong, item.GeoLat),
                        'map': map,
                        'title': item.PlaceName
                    });

                            // Make the marker-pin blue!
                            marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png')

                    // put in some information about each json object - in this case, the opening hours.
                            var infowindow = new google.maps.InfoWindow({
                        content: "<div class='infoDiv'><h2>" + item.PlaceName + "</h2>" + "<div><h4>Web Site: " + item.OpeningHours + "</h4></div></div>"
                    });

                    // finally hook up an "OnClick" listener to the map so it pops up out info-window when the marker-pin is clicked!
                    google.maps.event.addListener(marker, 'click', function () {
                            infowindow.open(map, marker);
                        });

                        })
            }


        </script>
    </section>
}
